{"version":3,"sources":["components/header/header.js","redux/actions.config.js","redux/service.js","redux/actions.js","components/city-card-header/city-card-header.js","components/daily-weather-item/daily-weather-item.js","components/city-card/city-card.js","components/weather-page/weather-page.js","components/favorote-city-card/favorite-city-card.js","components/favorites-page/favorites-page.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Link1","React","forwardRef","props","ref","innerRef","to","Link2","WeatherHeader","classes","className","AppBar","position","color","Toolbar","Typography","variant","Button","component","GET_DEFAULT_CITY","GET_DEFAULT_CITY_PENDING","GET_DEFAULT_CITY_SUCCESS","SEARCH_CITY_BY_NAME","SEARCH_CITY_BY_NAME_FAILURE","SEARCH_CITY_BY_NAME_REQUEST","GET_CITY_WEATHER","SAVE_KEY_OF_CITY","ADD_TO_FAVORITE","REMOVE_FROM_FAVORITE","apiKey","getCityDefault","key","axios","get","searchCity","search","getCurrentConditions","getFiveDayForecast","getCityCurrentConditions","dispatch","a","Service","result","allDataForCity","type","Actions","payload","close","padding","CityCardHeader","city","temperature","units","favorite","changeFavoriteCards","heartStyle","useState","open","setOpen","handleClose","event","reason","style","onClick","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","message","id","action","size","IconButton","aria-label","card","minWidth","bullet","display","margin","transform","fontSize","pos","marginBottom","DailyWeatherItem","date","maxTemp","minTemp","Grid","item","xs","sm","md","Card","CardContent","gutterBottom","moment","format","CityCard","state","isFavorite","reduxActions","removeFromFavorite","weather","data","setState","addCityToFavorite","prevProps","this","someFavorite","favorites","some","el","LocalizedName","fiveDayWeather","cardsDay","map","day","idx","Date","Temperature","Maximum","Value","Minimum","Unit","Imperial","addToFavorite","container","direction","justify","alignItems","Component","connect","removeCityFromFavorite","WeatherPage","onLabelChange","e","label","target","value","onSubmit","preventDefault","replace","trim","openModal","closeModal","getCityFiveDayAction","Key","Container","TextField","onChange","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","DailyForecasts","name","error","maxWidth","media","height","FavoriteCityCard","temperetare","condition","image","imageLink","CardActionArea","CardMedia","favoriteList","length","WeatherText","WeatherIcon","App","path","exact","FavoritesPage","Boolean","window","location","hostname","match","initialState","updateFavoriteCards","arr","slice","store","createStore","itemIndex","findIndex","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f36bf6b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\n  \r\n  const Link1 = React.forwardRef((props, ref) => (\r\n    <RouterLink innerRef={ref} to=\"/\" {...props} />\r\n  ));\r\n  const Link2 = React.forwardRef((props, ref) => (\r\n    <RouterLink innerRef={ref} to=\"/favorites-page\" {...props} />\r\n  ));\r\nconst WeatherHeader = () => {\r\n    const classes = useStyles();\r\n    return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"sticky\" color=\"default\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Herolo Weather Task\r\n          </Typography>\r\n            <Button color=\"inherit\"  component={Link1}>\r\n                HOME\r\n            </Button>\r\n            <Button color=\"inherit\"  component={Link2}>\r\n              FAVORITES\r\n            </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default WeatherHeader;","export default {\r\n\r\n    GET_DEFAULT_CITY: \"GET_DEFAULT_CITY\",\r\n    GET_DEFAULT_CITY_PENDING: \"GET_DEFAULT_CITY_PENDING\",\r\n    GET_DEFAULT_CITY_SUCCESS: \"GET_DEFAULT_CITY_SUCCESS\",\r\n\r\n\r\n    SEARCH_CITY_BY_NAME: \"SEARCH_CITY_BY_NAME\",\r\n    SEARCH_CITY_BY_NAME_FAILURE: \"SEARCH_CITY_BY_NAME_FAILURE\",\r\n    SEARCH_CITY_BY_NAME_REQUEST: \"SEARCH_CITY_BY_NAME_REQUEST\",\r\n\r\n    GET_CITY_WEATHER: \"GET_CITY_WEATHER\",\r\n\r\n    SAVE_KEY_OF_CITY: \"SAVE_KEY_OF_CITY\",\r\n\r\n    ADD_TO_FAVORITE: \"ADD_TO_FAVORITE\",\r\n    REMOVE_FROM_FAVORITE: \"REMOVE_FROM_FAVORITE\",\r\n\r\n}","import axios from \"axios\"\r\n\r\nconst apiKey = \"n8pQM79ZR8Ivygs8fXKxeGdxJGxZYXi0\"\r\n\r\n\r\nfunction getCityDefault(key) {\r\n    return axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=${apiKey}`);\r\n}\r\n\r\nfunction searchCity(search) {\r\n\r\n    return axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${search}`)\r\n\r\n};\r\n\r\nfunction getCurrentConditions(key) {\r\n    return axios.get(`http://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${apiKey}`);\r\n}\r\n\r\n\r\nfunction getFiveDayForecast(key) {\r\n    return axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${key}?apikey=${apiKey}`);\r\n}\r\n\r\nexport default {\r\n    getCityDefault,\r\n    searchCity,\r\n    getCurrentConditions,\r\n    getFiveDayForecast\r\n }","import Actions from \"./actions.config\"\r\nimport Service from \"./service\";\r\n\r\n\r\nexport const getCitySuccessAction = (fiveDayWeather) => {\r\n    return {\r\n        type: Actions.GET_DEFAULT_CITY_SUCCESS,\r\n        payload: { fiveDayWeather }\r\n    }\r\n}\r\n\r\n\r\nexport const getCityFiveDayAction = (key) => {\r\n    return async (dispatch) => {\r\n        const result = await Service.getFiveDayForecast(key);\r\n        dispatch(getCitySuccessAction(result.data.DailyForecasts))\r\n    }\r\n}\r\n\r\n\r\nexport const searchCitySuccess = (search) => {\r\n    return {\r\n        type: Actions.SEARCH_CITY_BY_NAME,\r\n        payload: { search }\r\n    }\r\n}; \r\n\r\n\r\nconst searchError = (error) => {\r\n    return {\r\n      type: Actions.SEARCH_CITY_BY_NAME_FAILURE,\r\n      payload: {error}\r\n    };\r\n};\r\n\r\n\r\n// export const searchCityAction = (name) => {\r\n//     return async (dispatch) => {\r\n//         const result = await Service.searchCity(name);\r\n//         dispatch(searchCitySuccess(result.data))\r\n//     }\r\n// }\r\nexport const searchCityAction = (name) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const result = await Service.searchCity(name);\r\n            dispatch(searchCitySuccess(result.data))\r\n        } catch (error) {\r\n            dispatch(searchError(error))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const CityWeatherDataSuccess = (allDataForCity) => {\r\n    return {\r\n        type: Actions.GET_CITY_WEATHER,\r\n        payload: {allDataForCity}\r\n    }\r\n}\r\n\r\nexport const getCityCurrentConditions = (key) => {\r\n    return async (dispatch) => {\r\n        const result = await Service.getCurrentConditions(key);\r\n        dispatch(CityWeatherDataSuccess(result))\r\n    }\r\n}\r\n\r\nexport const addCityToFavorite = (city) => {\r\n    return {\r\n        type: Actions.ADD_TO_FAVORITE,\r\n        payload:city\r\n    }\r\n}\r\n\r\nexport const removeCityFromFavorite = (city) => {\r\n    return {\r\n        type: Actions.REMOVE_FROM_FAVORITE,\r\n        payload:city\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, Button, Snackbar,IconButton} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    close: {\r\n      padding: theme.spacing(0.5),\r\n    },\r\n  }));\r\n\r\nconst CityCardHeader = ({city, temperature, units, favorite, changeFavoriteCards}) => {\r\n    const classes = useStyles();\r\n    const heartStyle = favorite ? {color:'red'} : {color: 'white'}\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                {city} {temperature}&deg;{units}\r\n            </Typography>\r\n            <FavoriteIcon style={heartStyle}/>\r\n            <Button color=\"inherit\" onClick={()=>{\r\n              changeFavoriteCards(city)\r\n              setOpen(true);\r\n              }}>\r\n              {favorite ? 'Remove from favorires':'Add to Favorites'}\r\n            </Button>\r\n\r\n\r\n            <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        ContentProps={{\r\n          'aria-describedby': 'message-id',\r\n        }}\r\n        message={<span id=\"message-id\">{favorite ? 'Added to Favorites' : 'Removed from Favorires'}</span>}\r\n        action={[\r\n          <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n            ok\r\n          </Button>,\r\n          <IconButton\r\n            key=\"close\"\r\n            aria-label=\"close\"\r\n            color=\"inherit\"\r\n            className={classes.close}\r\n            onClick={handleClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>,\r\n        ]}\r\n      />\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityCardHeader;","import React from 'react';\r\nimport moment from 'moment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    minWidth: 150,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function DailyWeatherItem({date, maxTemp, minTemp, units}) {\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <Grid item xs={12} sm={4} md={2}>\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n        {moment(date).format('dddd')}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {moment(date).format(\"MMM Do YY\")}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {maxTemp}&deg;/{minTemp}&deg; {units}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { removeCityFromFavorite, addCityToFavorite, getCityCurrentConditions } from \"../../redux/actions\";\r\nimport CityCardHeader from '../city-card-header/city-card-header';\r\nimport DailyWeatherItem from '../daily-weather-item/daily-weather-item';\r\n\r\nclass CityCard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            isFavorite: false\r\n        }\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.search!==prevProps.search){\r\n            const {search, favorites} = this.props;\r\n            const someFavorite = favorites.some(el=>el.city===search.LocalizedName);\r\n            this.setState({\r\n                isFavorite: someFavorite\r\n            })\r\n        }\r\n    }\r\n\r\n    changeFavoriteCards = (city) => {\r\n        if(!this.state.isFavorite){\r\n            this.props.reduxActions.addCityToFavorite({weather: this.props.allDataForCity.data[0], city: city});\r\n            this.setState((state)=>{\r\n                return {\r\n                    isFavorite: !state.isFavorite\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            this.props.reduxActions.removeFromFavorite({weather: this.props.allDataForCity.data[0], city: city});\r\n            this.setState((state)=>{\r\n                return {\r\n                    isFavorite: !state.isFavorite\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { fiveDayWeather, allDataForCity} = this.props;\r\n        \r\n        const { LocalizedName } = this.props.search;\r\n\r\n        if (!allDataForCity) {\r\n          return null;  \r\n        }\r\n        \r\n        const cardsDay = fiveDayWeather.map((day,idx)=><DailyWeatherItem key={idx}\r\n        date={day.Date}\r\n        maxTemp={day.Temperature.Maximum.Value} minTemp={day.Temperature.Minimum.Value}\r\n        units={day.Temperature.Minimum.Unit}\r\n        />);\r\n\r\n        return (\r\n            <Grid item xs={12} sm={12} md={12}>\r\n            <div>\r\n                <CityCardHeader city={LocalizedName} temperature={allDataForCity.data[0].Temperature.Imperial.Value} units={allDataForCity.data[0].Temperature.Imperial.Unit}\r\n                favorite={this.state.isFavorite}\r\n                addToFavorite={this.addToFavorite}\r\n                removeFromFavorite={this.removeFromFavorite}\r\n                changeFavoriteCards={this.changeFavoriteCards}\r\n                />\r\n                <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={3}>\r\n                    {cardsDay}\r\n                </Grid>\r\n            </div>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { fiveDayWeather, allDataForCity, search, favorites } = state;\r\n    return {fiveDayWeather, allDataForCity, search, favorites};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        reduxActions: {\r\n            getCityCurrentConditions: (key) => {\r\n                dispatch(getCityCurrentConditions(key))\r\n            },\r\n            addCityToFavorite: (city) => {\r\n                dispatch(addCityToFavorite(city))\r\n            },\r\n            removeFromFavorite: (city) => {\r\n                dispatch(removeCityFromFavorite(city))\r\n            }\r\n            \r\n\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CityCard);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';import Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport { getCityFiveDayAction, searchCityAction, getCityCurrentConditions } from \"../../redux/actions\";\r\nimport CityCard from '../city-card/city-card';\r\n\r\nclass WeatherPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            label: '',\r\n            openModal: false\r\n        }\r\n    }\r\n    onLabelChange = (e) => {\r\n        this.setState({\r\n            label:e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    onSubmit = (event) => {\r\n        const {label} = this.state;\r\n        event.preventDefault();\r\n        if (label.replace(/[^A-Za-z]/ig, '').trim()) {\r\n            this.props.reduxActions.searchCity(label);\r\n            this.setState({\r\n                label: ''\r\n            });  \r\n        }\r\n        else {\r\n            this.setState({\r\n                openModal: !this.state.openModal\r\n            })\r\n        }  \r\n    }\r\n\r\n    closeModal= () => {\r\n        this.setState({\r\n            openModal: !this.state.openModal\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.reduxActions.getCityFiveDayAction(215854);\r\n        this.props.reduxActions.getCityCurrentConditions(215854);\r\n        this.props.reduxActions.searchCity(\"tel aviv\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.search!==prevProps.search){\r\n            if(!this.props.search) {\r\n                return null;\r\n            }\r\n            this.props.reduxActions.getCityFiveDayAction(this.props.search.Key);\r\n            this.props.reduxActions.getCityCurrentConditions(this.props.search.Key);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { search } = this.props;\r\n        if(!search) {\r\n            return null;\r\n        }\r\n        return(\r\n        <div>\r\n            <Container>\r\n            <h1>weather page</h1>\r\n            <form onSubmit={this.onSubmit}>\r\n            <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={2}>\r\n            <Grid item>\r\n            <IconButton aria-label=\"search\"  type=\"submit\">\r\n            <SearchIcon />\r\n            </IconButton>\r\n            </Grid>\r\n            <Grid item>\r\n            <TextField\r\n                    id=\"outlined-name\"\r\n                    label=\"chek weather in your city\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    onChange={this.onLabelChange}\r\n                    value={this.state.label}\r\n                />\r\n                </Grid>\r\n        </Grid>\r\n            </form>\r\n            <Grid container>\r\n            <Dialog\r\n            open={this.state.openModal}\r\n            onClose={this.closeModal}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n            >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n            {\"Enter the name of the city\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n            Enter the full of the city name or part of it. Searching should be done in English letters only.\r\n            </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={this.closeModal} color=\"primary\">\r\n                Ok\r\n            </Button>\r\n            </DialogActions>\r\n      </Dialog>\r\n            <CityCard/>\r\n            </Grid>\r\n            </Container>\r\n        </div>            \r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        reduxActions: {\r\n            getCityFiveDayAction: (key) => {\r\n                dispatch(getCityFiveDayAction(key))\r\n            },\r\n            searchCity: (search) => {\r\n                dispatch(searchCityAction(search))\r\n            },\r\n            getCityCurrentConditions: (key) => {\r\n                dispatch(getCityCurrentConditions(key))\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WeatherPage);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 180,\r\n  },\r\n  media: {\r\n    height: 110,\r\n  },\r\n});\r\n\r\nconst FavoriteCityCard = ({city, temperetare, units, condition, image}) => {\r\n    const classes = useStyles();\r\n    const imageLink = `images/${image}-s.png`\r\n    return (\r\n    <Grid item xs={6} sm={4} md={2}> \r\n      <Card className={classes.card}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            className={classes.media}\r\n            image={imageLink}\r\n            title={condition}\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {city}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {temperetare}&deg;{units}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              {condition}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n      </Grid>\r\n    )\r\n}\r\n\r\nexport default FavoriteCityCard","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FavoriteCityCard from '../favorote-city-card/favorite-city-card';\r\n\r\n\r\nconst FavoritesPage = ({favorites}) => {\r\n    const favoriteList =  favorites.length ? favorites.map((city, idx)=><FavoriteCityCard key={idx} city={city.city} temperetare={city.weather.Temperature.Imperial.Value} units={city.weather.Temperature.Imperial.Unit} condition={city.weather.WeatherText}\r\n    image={city.weather.WeatherIcon}/>): <h1>nothing added yet</h1>\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h1>favorites page</h1>\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}>\r\n                    {favoriteList}\r\n                </Grid>  \r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { favorites } = state;\r\n    return { favorites };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    null\r\n)(FavoritesPage);","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport WeatherHeader from './components/header/header';\nimport WeatherPage from './components/weather-page/weather-page';\nimport FavoritesPage from './components/favorites-page/favorites-page';\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <WeatherHeader/>\n        <Switch>\n          <Route path='/' component={WeatherPage} exact/>\n          <Route path='/favorites-page' component={FavoritesPage}/>\n          <Route path=\"**\" component={() => <h1> Not Found! </h1>} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Actions from \"./actions.config\";\r\n\r\nconst initialState = {\r\n    favorites: [],\r\n\r\n    fiveDayWeather: [],\r\n    search: null,\r\n    allDataForCity: null,\r\n    error: null\r\n}\r\n\r\nconst updateFavoriteCards = (arr, idx) => {\r\n    return [\r\n        ...arr.slice(0, idx),\r\n        ...arr.slice(idx+1)\r\n    ]\r\n}\r\n\r\nexport default function root(state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case Actions.GET_DEFAULT_CITY_SUCCESS: {\r\n            const { fiveDayWeather } = action.payload;\r\n            return { ...state, fiveDayWeather }\r\n        }\r\n\r\n        case Actions.SEARCH_CITY_BY_NAME: {\r\n            const {search} = action.payload;\r\n            return {...state, search: search[0]}\r\n        }\r\n\r\n        case Actions.SEARCH_CITY_BY_NAME_FAILURE: {\r\n            const {error} = action.payload;\r\n            return {\r\n                ...state,\r\n                error\r\n            }\r\n        };\r\n\r\n        case Actions.GET_CITY_WEATHER: {\r\n            const {allDataForCity} = action.payload;\r\n            return {...state, allDataForCity}\r\n        }\r\n\r\n        case Actions.ADD_TO_FAVORITE: {\r\n            const city = action.payload;\r\n            const { favorites } = state;\r\n            return {\r\n                ...state,\r\n                favorites: [...favorites, city]\r\n            }\r\n        }\r\n        case Actions.REMOVE_FROM_FAVORITE: {\r\n            const { favorites } = state;\r\n            const itemIndex = favorites.findIndex(({city}) => city === action.payload.city);\r\n            ;\r\n            return {\r\n                ...state,\r\n                favorites: updateFavoriteCards(favorites, itemIndex)\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { createStore, applyMiddleware } from \"redux\"\r\nimport root from \"./reducers\"\r\nimport thunk from \"redux-thunk\";\r\nconst store = createStore(root, applyMiddleware(thunk))\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}